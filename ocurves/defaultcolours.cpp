//
// author Kazys Stepanas
//
// Copyright (c) CSIRO 2015
//
#include "defaultcolours.h"

namespace ocurves
{
  // Based on the web safe colour set with some items removed to increase
  // constrast between colours and the default background.
  QRgb WebSafeColours[ColourCount] =
  {
    qRgb(220, 220, 220),
    qRgb(211, 211, 211),
    qRgb(192, 192, 192),
    qRgb(169, 169, 169),
    qRgb(128, 128, 128),
    qRgb(105, 105, 105),
    qRgb(119, 136, 153),
    qRgb(112, 128, 144),
    qRgb(47, 79, 79),
    qRgb(0, 0, 0),
    qRgb(255, 255, 255),
    qRgb(255, 250, 250),
    qRgb(240, 255, 240),
    qRgb(245, 255, 250),
    qRgb(240, 255, 255),
    qRgb(240, 248, 255),
    qRgb(248, 248, 255),
    qRgb(245, 245, 245),
    qRgb(255, 245, 238),
    qRgb(245, 245, 220),
    qRgb(253, 245, 230),
    qRgb(255, 250, 240),
    qRgb(255, 255, 240),
    qRgb(250, 235, 215),
    qRgb(250, 240, 230),
    qRgb(255, 240, 245),
    qRgb(255, 228, 225),
    qRgb(255, 192, 203),
    qRgb(255, 182, 193),
    qRgb(255, 105, 180),
    qRgb(255, 20, 147),
    qRgb(219, 112, 147),
    qRgb(199, 21, 133),
    qRgb(255, 160, 122),
    qRgb(250, 128, 114),
    qRgb(233, 150, 122),
    qRgb(240, 128, 128),
    qRgb(205, 92, 92),
    qRgb(220, 20, 60),
    qRgb(178, 34, 34),
    qRgb(139, 0, 0),
    qRgb(255, 0, 0),
    qRgb(255, 69, 0),
    qRgb(255, 99, 71),
    qRgb(255, 127, 80),
    qRgb(255, 140, 0),
    qRgb(255, 165, 0),
    qRgb(255, 255, 0),
    qRgb(255, 255, 224),
    qRgb(255, 250, 205),
    qRgb(250, 250, 210),
    qRgb(255, 239, 213),
    qRgb(255, 228, 181),
    qRgb(255, 218, 185),
    qRgb(238, 232, 170),
    qRgb(240, 230, 140),
    qRgb(189, 183, 107),
    qRgb(255, 215, 0),
    qRgb(255, 248, 220),
    qRgb(255, 235, 205),
    qRgb(255, 228, 196),
    qRgb(255, 222, 173),
    qRgb(245, 222, 179),
    qRgb(222, 184, 135),
    qRgb(210, 180, 140),
    qRgb(188, 143, 143),
    qRgb(244, 164, 96),
    qRgb(218, 165, 32),
    qRgb(184, 134, 11),
    qRgb(205, 133, 63),
    qRgb(210, 105, 30),
    qRgb(139, 69, 19),
    qRgb(160, 82, 45),
    qRgb(165, 42, 42),
    qRgb(128, 0, 0),
    qRgb(85, 107, 47),
    qRgb(128, 128, 0),
    qRgb(107, 142, 35),
    qRgb(154, 205, 50),
    qRgb(50, 205, 50),
    qRgb(0, 255, 0),
    qRgb(124, 252, 0),
    qRgb(127, 255, 0),
    qRgb(173, 255, 47),
    qRgb(0, 255, 127),
    qRgb(0, 250, 154),
    qRgb(144, 238, 144),
    qRgb(152, 251, 152),
    qRgb(143, 188, 143),
    qRgb(60, 179, 113),
    qRgb(46, 139, 87),
    qRgb(34, 139, 34),
    qRgb(0, 128, 0),
    qRgb(0, 100, 0),
    qRgb(102, 205, 170),
    qRgb(0, 255, 255),
    qRgb(0, 255, 255),
    qRgb(224, 255, 255),
    qRgb(175, 238, 238),
    qRgb(127, 255, 212),
    qRgb(64, 224, 208),
    qRgb(72, 209, 204),
    qRgb(0, 206, 209),
    qRgb(32, 178, 170),
    qRgb(95, 158, 160),
    qRgb(0, 139, 139),
    qRgb(0, 128, 128),
    qRgb(176, 196, 222),
    qRgb(176, 224, 230),
    qRgb(173, 216, 230),
    qRgb(135, 206, 235),
    qRgb(135, 206, 250),
    qRgb(0, 191, 255),
    qRgb(30, 144, 255),
    qRgb(100, 149, 237),
    qRgb(70, 130, 180),
    qRgb(65, 105, 225),
    qRgb(0, 0, 255),
    qRgb(0, 0, 205),
    qRgb(0, 0, 139),
    qRgb(0, 0, 128),
    qRgb(25, 25, 112),
    qRgb(230, 230, 250),
    qRgb(216, 191, 216),
    qRgb(221, 160, 221),
    qRgb(238, 130, 238),
    qRgb(218, 112, 214),
    qRgb(255, 0, 255),
    qRgb(255, 0, 255),
    qRgb(186, 85, 211),
    qRgb(147, 112, 219),
    qRgb(138, 43, 226),
    qRgb(148, 0, 211),
    qRgb(153, 50, 204),
    qRgb(139, 0, 139),
    qRgb(128, 0, 128),
    qRgb(75, 0, 130),
    qRgb(72, 61, 139),
    qRgb(106, 90, 205),
    qRgb(123, 104, 238)
  };

  const char *DefaultColourSetNames[ColourSetCount] =
  {
    "Standard colours",
    "Deuteranomal colours",
    "Protanomaly colours",
    "Tritanomaly colours",
    "Grey-scale colours"
  };

  const ColourName StandardColourSet[] =
  {
    Red,
    Green,
    Blue,
    MediumOrchid,
    Olive,
    Teal,
    Black,
    OrangeRed,
    Yellow,
    MediumAquamarine,
    Gainsboro,
    White,
    Pink,
    LightSalmon,
    Tomato,
    DarkOliveGreen,
    Aqua,
    LightSteelBlue,
    Silver,
    HotPink,
    Salmon,
    Coral,
    Wheat,
    Olive,
    PowderBlue,
    Thistle,
    DarkGrey,
    DeepPink,
    DarkSalmon,
    DarkOrange,
    Moccasin,
    BurlyWood,
    OliveDrab,
    Aquamarine,
    LightBlue,
    Plum,
    DimGrey,
    PaleVioletRed,
    LightCoral,
    Orange,
    PeachPuff,
    Tan,
    YellowGreen,
    Turquoise,
    SkyBlue,
    Violet,
    SlateGrey,
    MediumVioletRed,
    IndianRed,
    RosyBrown,
    LimeGreen,
    MediumTurquoise,
    DeepSkyBlue,
    Orchid,
    DarkSlateGrey,
    Crimson,
    Khaki,
    SandyBrown,
    Lime,
    DarkTurquoise,
    CornflowerBlue,
    Fuchsia,
    FireBrick,
    DarkKhaki,
    DarkGoldenrod,
    LawnGreen,
    LightSeaGreen,
    SteelBlue,
    MediumPurple,
    DarkRed,
    Gold,
    Peru,
    MediumSpringGreen,
    CadetBlue,
    RoyalBlue,
    BlueViolet,
    Chocolate,
    LightGreen,
    DarkCyan,
    DarkBlue,
    DarkViolet,
    SaddleBrown,
    DarkSeaGreen,
    MidnightBlue,
    Purple,
    Sienna,
    MediumSeaGreen,
    Indigo,
    Brown,
    SeaGreen,
    DarkSlateBlue,
    Maroon,
    DarkGreen,
    SlateBlue
  };

  const ColourName DeuteranomalyColourSet[] =
  {
    RoyalBlue,
    Yellow,
    Silver,
    Black,
    Blue,
    Khaki,
    Gainsboro,
    Beige,
    Navy,
    DarkKhaki,
    White,
    Grey,
    MidnightBlue,
    SlateGrey,
    Ivory,
    Gold,
    DarkSlateBlue,
    MediumSlateBlue
  };

  const ColourName ProtanomalyColourSet[] =
  {
    Blue,
    Yellow,
    Black,
    Silver,
    CornflowerBlue,
    Gainsboro,
    MediumSlateBlue,
    Khaki,
    Grey,
    DarkBlue,
    Beige,
    DarkKhaki,
    MidnightBlue,
    SlateGrey,
    RoyalBlue,
    Ivory,
    DarkSlateBlue,
  };

  const ColourName TritanomalyColourSet[] =
  {
    DeepSkyBlue,
    DeepPink,
    PaleTurquoise,
    Black,
    Crimson,
    LightSeaGreen,
    Gainsboro,
    Blue,
    DarkRed,
    Silver,
    Brown,
    DarkTurquoise,
    Grey,
    Maroon,
    Teal,
    SlateGrey,
    MidnightBlue,
    DarkSlateGrey,
  };

  const ColourName GreyColourSet[] =
  {
    Black,
    Silver,
    DarkSlateGrey,
    Grey,
    Gainsboro,
    SlateGrey,
  };

  const ColourName *DefaultColourSets[ColourSetCount] =
  {
    StandardColourSet,
    DeuteranomalyColourSet,
    ProtanomalyColourSet,
    TritanomalyColourSet,
    GreyColourSet,
  };

  const unsigned DefaultColourSetCounts[ColourSetCount] =
  {
    sizeof(StandardColourSet) / sizeof(StandardColourSet[0]),
    sizeof(DeuteranomalyColourSet) / sizeof(DeuteranomalyColourSet[0]),
    sizeof(ProtanomalyColourSet) / sizeof(ProtanomalyColourSet[0]),
    sizeof(TritanomalyColourSet) / sizeof(TritanomalyColourSet[0]),
    sizeof(GreyColourSet) / sizeof(GreyColourSet[0])
  };
}
